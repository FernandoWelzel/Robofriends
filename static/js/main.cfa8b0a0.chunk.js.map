{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","robots.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","username","email","className","alt","src","CardList","CardArray","robots","map","robot","i","key","SearchBox","SearchChange","height","type","placeholder","onChange","Scroll","props","style","overflowY","children","App","OnSearchChange","event","setState","Searchfield","target","value","state","filteredArray","this","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAAC,GAAkC,EAAhCC,GAAiC,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAChC,OACE,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,EAA1B,cACpB,6BACI,4BAAKD,GACL,4BAAKE,MCOJI,EAZE,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACSC,KAAI,SAACC,EAAOC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGZ,GAAIW,EAAMX,GAAIC,KAAMU,EAAMV,KAAMC,SAAUS,EAAMT,SAAUC,MAAOQ,EAAMR,WAGhG,OACI,6BACKK,ICKEM,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,OAAO,QACR,2BACIZ,UAAU,uCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCCXK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUP,OAAQ,WACtCK,EAAMG,WCLNf,EAAS,CACpB,CACET,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BCdIsB,G,wDArCX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1C,EAAKC,MAAQ,CACTvB,OAAQA,EACRoB,YAAa,IAJP,E,qDAoBJ,IAAD,OACCI,EAAgBC,KAAKF,MAAMvB,OAAO0B,QAAO,SAAAxB,GAC3C,OAAOA,EAAMV,KAAKmC,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAGpE,OACI,yBAAKhC,UAAU,MACX,wBAAIY,OAAO,QAAX,eACA,kBAAC,EAAD,CAAWD,aAAcmB,KAAKR,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUjB,OAASwB,U,GA/BrBK,IAAMC,YCAxBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SP0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cfa8b0a0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, username, email }) => {\r\n    return (\r\n      <div className='bg-light-green dib br3 pa3 ma2 bwd2 grow shadow-5 tc'>\r\n          <img alt='Robot' src={`https://robohash.org/${username}?200x200`}/>\r\n          <div>\r\n              <h2>{name}</h2>\r\n              <h3>{email}</h3>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ({ robots }) => {\r\n    const CardArray = robots.map((robot, i) => {\r\n        return <Card key={i} id={robot.id} name={robot.name} username={robot.username} email={robot.email}></Card>\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({SearchChange}) => {\r\n    return (\r\n        <div height='10vh'>\r\n            <input \r\n                className='ma3 pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='Search robots'  \r\n                onChange={SearchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', height: '71.2vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\nimport CardList from '../Components/CardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport { robots } from '../robots.js'\r\nimport './app.css';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            Searchfield: '' \r\n        }\r\n    }\r\n\r\n    OnSearchChange = (event) => {\r\n        this.setState({ Searchfield: event.target.value });\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     fetch('http://jsonplaceholder.typicode.com/users').then(jsonFile => {\r\n    //         return jsonFile.json();\r\n    //     }).then(users => {\r\n    //         this.setState({ robots: users })\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        const filteredArray = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.Searchfield.toLowerCase())\r\n        })\r\n        \r\n        return (\r\n            <div className='tc'>\r\n                <h1 height='10vh'>RoboFriends</h1>\r\n                <SearchBox SearchChange={this.OnSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={ filteredArray }></CardList>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App.js'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}